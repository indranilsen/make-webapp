#!/bin/bash
# ========================================
#	HEADER
# ========================================

# Author: Indranil Sen
# 
# This script creates a boilerplate for an
# AngularJS web app.

version="1.1.0"

# ========================================
#	FLAGS
# ========================================

# Defaults
silent=0
saveLog=0
initTemp=0
css=0
passedArgs=()

while [ ! $# -eq 0 ]; do
case "$1" in
	--help | -h)
		echo -n -e "\nmake-webapp [OPTION]... [FILE]...

	This script creates a boilerplate project for an AngularJS web app.	

	Options:
	-h, --help                       Print usage information
	-n, --name    [project_name]     Name of project
	-t, --template					 Initialize project with a template and css
	-l, --logfile [path]             Specify path for log file as parameter
	-s, --silent                     Do not print log messages to standard output
	-v, --version                    Prints script version to standard output

	If the -l, --logfile [path] is specified, the script creates a logfile
	of the script processes.\n\n"
		exit
		;;
	--version | -v)
		echo "$version"
		exit
		;;
	--name | -n)
		passedArgs+=("n")
		shift
		projectName="${1}"
		if [ -z "$projectName" ]; then
			echo "Specify project name."
			exit
		fi
		;;
	--template | -t)
		passedArgs+=("t")
		initTemp=1
		css=1
		;;
	--logfile | -l)
		passedArgs+=("l")
		shift
		LOG_FILE="${1}"
		if [ -z "$LOG_FILE" ]; then
			echo "Specify path to log file."
			exit
		fi
		if [ ! -d "$LOG_FILE" ]; then
			echo "Invalid path."
			exit
		fi
		LOG_FILE="$LOG_FILE/runlog.log"
		saveLog=1
		;;
	--silent | -s)
		passedArgs+=("s")
		silent=1
		;;
esac
shift
done

# ========================================
#	VARIABLES
# ========================================
scriptName="${BASH_SOURCE[0]}"
scriptPath="$(cd "$(dirname "scriptName" )" && pwd)"

root="$(pwd)/$projectName"

homebrewDependencies=("node")
install=()

nodeDevDependencies=("gulp" "gulp-autoprefixer" "gulp-connect" 
	"gulp-ng-annotate" "gulp-concat" "gulp-uglify" 
	"gulp-jshint" "jshint-stylish" "gulp-inject" 
	"yargs" "merge-stream" "fs" "add-stream" "gulp-clean-css" 
	"gulp-nodemon" "gulp-notify" "del" "gulp-connect" 
	"express" "compression")
nodeProdDependencies=()

blue=$(tput setaf 4)
cyan=$(tput setaf 6)
red=$(tput setaf 1)
pink=$(tput setaf 5)
yellow=$(tput setaf 3)
colorReset=$(tput sgr0)
# ========================================
#	FUNCTIONS
# ========================================

# Checking Homebrew Package Installation
# --------------------
# Checking is homebrew is installed. In not found, 
# the script will install homebrew.
# --------------------
findBrew() {
	if [ $(which brew 2>/dev/null) ]; then
		log -m Homebrew available
	else
		log -e Homebrew not found. Now installing ...
		/usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
		log -m Homebrew installed
	fi
}

# Checking for Homebrew Dependencies
# --------------------
# Dependencies for running the webapp are listed in the
# arrays. If not found, the dependices are installed.
# --------------------
checkBrewDependencies() {
	log -m Checking for brew dependices ...
	for pkg in ${homebrewDependencies[@]}
	do
		if [ $(which $pkg 2>/dev/null) ]; then
			continue
		else
			log -e "$pkg not installed"
			install+=("$pkg")
		fi
	done

}

# Installing Homebrew Dependencies
# --------------------
# Dependencies for running the webapp are installed using homebrew
# --------------------
installBrewDependencies() {
	for pkg in ${install[@]}
	do
		"$(brew install "$pkg")"
	done

	if [ ${#install[@]} -gt 0 ]; then
		log -m Brew dependencies installed
	else
		log -m Brew dependencies alreadly installed
	fi
}

# Installing Node Dependencies
# --------------------
# Dev and prod dependencies are installed using npm
# --------------------
installNpmDependencies() {
	log -m Installing node packages ...
	for devPkg in ${nodeDevDependencies[@]}
	do
		"$(npm install --save-dev "$devPkg")"
	done

	for prodPkg in ${nodeProdDependencies[@]}
	do
		"$(npm install --save "$prodPkg")"
	done
	log -m Node packages installed
}

# Log Messages
# --------------------
# Logs messags to standard output. Three types of messages
# can be logged:
#	e: error messages
#	m: general message
# 	l: activity log messages
#	n: unformatted, normal messages (not logged to log file)
# Each type is displayed differently. If a log file directory is 
# specied by --logfile '~/directory', then any log message will 
# be piped to the log file.
# Logged messages are not output to standard output if the --silent
# flag is specified.
# --------------------
log() {
	TAG=""
	TIMESTAMP="$(date +"%Y-%m-%d:%H:%M:%S")"
	cleanPrint=false
	local OPTIND;
	while getopts "e:m:l:n:" option
	do
		case "${option}" in
			m) TAG="$yellow[MSG] ";;	
			e) TAG="$red[ERR] ";;
			l) TAG="$cyan[LOG] ";;
			n) TAG=""; cleanPrint=true;;
			*) echo 'Incorrect log usage. Flag required.'; exit;;
		esac

		shift

		# Only print to log file, if a log file is specified in program 
		# argument AND the messaged to be logged has either m, e or l flag
		if [ $saveLog -eq 1 ] && [ $cleanPrint = false ]; then
				echo -e "${TAG:5}[$TIMESTAMP]:\n$@\n" >> $LOG_FILE
		elif [ $silent -eq 0 ]; then
			echo "$TAG$colorReset$@"
		fi
	done
}

# Checking Required Arguments
# --------------------
# Required arguments are checked. If they are not passed, the program exits gracefully.
# --------------------
checkReqArgs() {
	required=('n:Project name required.')
	valid=0
	for ((i = 0; i < ${#required[@]}; i++))
	do
		flag="${required[$i]:0:1}"
		msg="${required[$i]:2}"
		found=false
		for ((j = 0; j < ${#passedArgs[@]}; j++))
		do
			if [ $flag == ${passedArgs[$j]} ]; then
				((valid++))
				found=true
				break
			else
				found=false
			fi
		done

		if [ $found == false ]; then
			case "$flag" in
				n)  read -p "Project name? " projectName
					while [[ -z "$projectName" ]]; do
						read -p "Answer required: " projectName
					done
					root="$(pwd)/$projectName"
					;;
			esac
		fi

	done

	if [ $valid -eq ${#required[@]} ]; then
		log -m "All required args are specified"
	fi
}

# Prompt User to Make Template
# --------------------
# Aks the user to initialize the project with a template
# --------------------
promptToMakeTemplate() {
	if [ $initTemp -ne 1 ]; then
		echo
		read -p "Initialize with template?(y/n) " templateResponse
		if [ ! -z $templateResponse ]; then
			templateResponse=$(echo "$templateResponse" | awk '{print tolower($0)}')
			if [ $templateResponse == 'y' ] || [ $templateResponse == 'yes' ]; then
				initTemp=1
				echo
				read -p "Include CSS?(y/n) " cssResponse
				while [[ -z "$cssResponse" ]]; do
				        read -p "Answer required. " cssResponse
				done
				cssResponse=$(echo "$cssResponse" | awk '{print tolower($0)}')
				if [ $cssResponse == 'y' ] || [ $cssResponse == 'yes' ]; then
					css=1
				fi
			fi
		fi
		echo
	fi
}

# Prompt User for Packages
# --------------------
# Aks the user to install additional node packages
# --------------------
promptAdditionalPackageInstall() {
	echo
	log -n "Default packages:"
	for ((i = 0; i < ${#nodeDevDependencies[@]}; i++))
	do
		printf "%d: %s\n" $((i+1)) ${nodeDevDependencies[$i]}
	done

	log -n ""

	read -p "Install additional dev packages? (press return to continue) " val

	if [ ! -z "$val" ]; then
		if [[ $val == *[',']* ]]; then
			IFS=',' read -r -a packages <<< "$val"
		elif [[ $val == *[', ']* ]]; then
			IFS=', ' read -r -a packages <<< "$val"
		elif [[ $val == *[' ']* ]]; then
			IFS=' ' read -r -a packages <<< "$val"
		else
			read -r -a packages <<< "$val"
		fi
	fi

	if [ ${#packages[@]} -gt 0 ]; then
		for pkg in ${packages[@]}
		do
			foundNodePkg=false
			for check in ${nodeDevDependencies[@]}
			do
				if [ $check == $pkg ]; then
					foundNodePkg=true
				fi
			done
			if [ $foundNodePkg == false ]; then
				nodeDevDependencies+=("$pkg")
			fi
		done
	fi
}

# Making App Directories
# --------------------
# Makes the directories for app. The root folder is the project name specified by the user.
# --------------------
makeDirectories() {
	log -m Making directories...
	
	mkdir -p $root/{server,web/{css,img,js,partials}}

	cd $root/web/css
		mkdir -p {footer,header,main-content/{about,contact,home},page-overall,third-party}
	cd ../../..

	cd $root/web/js
		mkdir -p {controllers/{footer,header,main-content},directives,providers}
	cd ../../..

	cd $root/web/partials
		mkdir -p {directives,footer,header,main-content}
	cd ../../..	
}

# Adding Content to Files
# --------------------
# Adding content to gitignore file
# --------------------
addGitIgnore() {
	cat <<- EOF
			
			###################
			#  MAC OS files
			###################
			.DS_Store
			.AppleDouble
			.LSOverride

			# Icon must end with two \r
			Icon


			# Thumbnails
			._*

			# Files that might appear in the root of a volume
			.DocumentRevisions-V100
			.fseventsd
			.Spotlight-V100
			.TemporaryItems
			.Trashes
			.VolumeIcon.icns

			# Directories potentially created on remote AFP share
			.AppleDB
			.AppleDesktop
			Network Trash Folder
			Temporary Items
			.apdisk

			####################
			# windows OS files
			####################
			# Windows image file caches
			Thumbs.db
			ehthumbs.db

			# Folder config file
			Desktop.ini

			# Recycle Bin used on file shares
			$RECYCLE.BIN/

			# Windows Installer files
			*.cab
			*.msi
			*.msm
			*.msp

			# Windows shortcuts
			*.lnk
		EOF
}

# --------------------
# Adding content to index.html
# --------------------
addIndexHTML() {

	if [ $initTemp -eq 1 ]; then
	read -r -d '' content <<- "EOF"
		<!DOCTYPE html>
		<html>

		<head>
			\t<meta charset="utf-8">
			\t<title>[Insert Title]</title>
			\t<script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.5.7/angular.min.js"></script>
			\t<script src="https://cdnjs.cloudflare.com/ajax/libs/angular-ui-router/0.3.1/angular-ui-router.min.js"></script>
			\t<link rel="stylesheet" href="css/styles-main.css" type="text/css" media="all">
			\t<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/font-awesome/4.6.3/css/font-awesome.min.css">
		</head>

		<body ng-app="app">
			\t<app-header></app-header>
			\t<app-main></app-main>
			\t<app-footer></app-footer>

			\t<script src="js/app.js"></script>

			\t<script src="js/controllers/header/headerController.js"></script>
			\t<script src="js/controllers/main-content/mainController.js"></script>
			\t<script src="js/controllers/main-content/homeController.js"></script>
			\t<script src="js/controllers/main-content/aboutController.js"></script>
			\t<script src="js/controllers/main-content/contactController.js"></script>
			\t<script src="js/controllers/footer/footerController.js"></script>

			\t<script src="js/directives/header.js"></script>
			\t<script src="js/directives/main.js"></script>
			\t<script src="js/directives/home.js"></script>
			\t<script src="js/directives/about.js"></script>
			\t<script src="js/directives/contact.js"></script>
			\t<script src="js/directives/footer.js"></script>
		</body>

		<html>
		EOF
	else
		read -r -d '' content <<- "EOF"
		<!DOCTYPE html>
		<html>

		<head>
			\t<meta charset="utf-8">
			\t<title>[Insert Title]</title>
			\t<link rel="stylesheet" href="css/styles-main.css" type="text/css" media="all">
		</head>

		<body>
		</body>

		<html>
		EOF
	fi

	printf "$content"
}

# --------------------
# Adding content to styles-main.js
# --------------------
addStylesMainCSS() {
	cat <<- EOF
		/* General page styles */
		@import url('page-overall/style.css');
		
		/* 3rd party */
		/*@import url('third-party/[INSERT FILE NAME].css');*/

		/* <header> styles */
		@import url('header/style.css');
		@import url('main-content/about/style.css');
		@import url('main-content/contact/style.css');
		@import url('main-content/home/style.css');

		/* <main> and its children styles */
		@import url('main-content/style.css');

		/* <footer> styles */
		@import url('footer/style.css');

		EOF
}

# --------------------
# Adding content to app.js
# --------------------
addAppJS() {
	if [ $initTemp -eq 1 ]; then
	read -r -d '' appJsContent <<- "EOF"
		angular.module('app',['ui.router']);

		angular.module('app')
		.config(function($stateProvider, $urlRouterProvider) {
		    
		    \t$urlRouterProvider.otherwise('/home');
		    
		    \t$stateProvider
		    	\t\t.state('home', {
		            \t\t\turl: '/home',
		            \t\t\ttemplate: "<app-main-home>"
		        \t\t})
		        \t\t.state('about', {
		            \t\t\turl: '/about',
		            \t\t\ttemplate: "<app-main-about>"
		        \t\t})
		        \t\t.state('contact', {
		            \t\t\turl: '/contact',
		            \t\t\ttemplate: "<app-main-contact>"
		        \t\t});
		})
		.run(function() {
			\tconsole.log("App started");
		});
		EOF
	fi

	printf "$appJsContent"
}

# --------------------
# Adding content to server.js
# --------------------
addServerJS() {
	read -r -d '' serverJsContent <<- "EOF"
		var express = require("express");
		var app = express();
		var argv = require('yargs').argv;
		var port = argv.port || 3000;
		var dist = argv.prod  ? '/dist' :'';
		var compression = require('compression');

		app.use(compression());//GZIP

		var oneDay = 86400000;
		app.use('/js', express.static(__dirname + dist+'/js', { maxAge : oneDay*30 }));//30 days
		app.use('/css', express.static(__dirname + dist+'/css', { maxAge : oneDay*30 }));//30 days
		app.use('/img', express.static(__dirname + dist+'/img', { maxAge : oneDay*30 }));//30 days
		app.use(express.static(__dirname+dist));


		app.listen(port);
		console.log("Server listening on port " + port + " with mode prod? "+ (argv.prod ? true:false));
		EOF

	printf "$serverJsContent"
}

# --------------------
# Adding content to gulpfile.js
# --------------------
addGulpFile() {
	printf "var config = require(\'./gulp_config/config.js\');\n"
	for devPkg in ${nodeDevDependencies[@]}
	do
		if [[ $devPkg == "yargs" ]]; then
			var="var argv = require('$devPkg').argv;"
		else
			var="var $devPkg = require('$devPkg');"
			if [[ $var == *['-']* ]]; then
				var="var ${devPkg#*-} = require('$devPkg');"
			fi
		fi
		echo $var
	done
}

# --------------------
# Adding content to config.js
# --------------------
addGulpConfigFile() {
	# echo -e "var config = {\n

	# \n}\n\nmodule.exports = config;"
	read -r -d '' gulpConfig <<- "EOF"
		var config = {
		\t\"VERSION\": 1.0,
		\t\"APP_NAME\": \"%s\",
		\t\"LANDING_PAGE\": \"index.html\",
		\t\"SERVER\": \"server.js\",
		\t\"folders\": {
		\t\t\"css\":\"css\",
		\t\t\"js\":\"js\",
		\t\t\"partials\":\"partials\",
		\t\t\"img\":\"img\",	
		\t},
		\t\"inject\": {
		\t\t\"injectOptionsCss\": {
		\t\t\tignorePath: \'css\',
		\t\t\taddRootSlash: false,
		\t\t\ttransform: function(elm){
		\t\t\t\tvar prepend = '/';
		\t\t\t\treturn '<link rel="stylesheet" href="'+prepend+elm+'">';
		\t\t\t}
		\t\t},
		\t\t\"injectOptionsJs\": {
		\t\t\tignorePath: \'js\',
		\t\t\taddRootSlash: false,
		\t\t\ttransform: function(elm){
		\t\t\t\tvar prepend = '/';
		\t\t\t\treturn '<script src="'+prepend+elm+'"></script>';
		\t\t\t}
		\t\t}
		\t},
		\t\"prod\": {
		\t\t\"main_folder\": \"dist\"
		\t},
		\t\"css\": {
		\t\t\"tasks\": {
		\t\t\t\"styles\": [\"css/**/*.css\",\"!css/styles-main.css\"]
		\t\t},
		\t\tconcat_file_name : function() {
		\t\t\treturn config.APP_NAME+'-v'+config.VERSION+'.min.css';
		\t\t}
		\t},
		\t\"partials\": {
		\t\t\"tasks\": {
		\t\t\t\"src\": \"partials/**/*\"
		\t\t}
		\t},
		\t\"js\": {
		\t\t\"tasks\": {
		\t\t\t\"scripts\": \"js/**/*.js\"
		\t\t},
		\t\tconcat_file_name : function() {
		\t\t\treturn config.APP_NAME+'-v'+config.VERSION+'.min.js';
		\t\t}
		\t},
		\t\"img\": {
		\t\t\"tasks\": {
		\t\t\t\"src\": \"img/**/*\"
		\t\t}
		\t}
		};\n\nmodule.exports = config;
		EOF
	printf "$gulpConfig" $projectName
}

# Adding Tasks to Gulp
# --------------------
# Adding to tasks to gulpfile.js
# --------------------
addGulpTasks() {
	read -r -d '' tasks <<- "EOF"
		\ngulp.task('server', function() {
			\tconnect.server();
		});
		
		gulp.task('clean', function(cb) {
			\tdel([config.prod.main_folder],cb);
		});

		gulp.task('img-copy', function(cb) {
			\tconsole.log('---------- Images Copy');
			\tgulp.src(config.img.tasks.src, {read: true})
				\t.pipe(gulp.dest(config.prod.main_folder+'/'+config.folders.img));
				\tcb();
		});

		gulp.task('partials-copy', function(cb) {
			\tconsole.log('---------- Partials Copy');
			\tgulp.src(config.partials.tasks.src, {read: true})
				\t\t.pipe(gulp.dest(config.prod.main_folder+'/'+config.folders.partials));
			\tcb();
		});

		gulp.task('scripts',['partials-copy','img-copy'], function(){
			\tconsole.log('---------- scripts');

			\tgulp.src(config.js.tasks.scripts)
				\t\t.pipe(jshint())
				\t\t.pipe(jshint.reporter('jshint-stylish'))
				\t\t.pipe(concat(config.js.concat_file_name()))
				\t\t.pipe(ngAnnotate())
				\t\t.pipe(uglify())
				\t\t.pipe(gulp.dest(config.prod.main_folder+'/'+config.folders.js));

		});

		gulp.task('styles', function () {
			\tconsole.log('---------- styles');

			\tvar allToBeMinfied = gulp.src(config.css.tasks.styles)
				\t\t.pipe(cleanCSS())
				\t\t.pipe(autoprefixer())
				\t\t.pipe(concat(config.css.concat_file_name()))
				\t\t.pipe(gulp.dest(config.prod.main_folder+'/'+config.folders.css));

		});

		gulp.task('index',['styles','scripts'] ,function () {
			\tconsole.log('---------- index');

			\tvar inject_prepend_css_url = 'css/';
			\tvar inject_prepend_js_url = 'js/';

			\tvar target = gulp.src(config.LANDING_PAGE);
			
			\tvar css_sources = gulp.src(config.css.tasks.styles, {read: true})
								\t\t\t\t\t\t.pipe(concat(inject_prepend_css_url+config.css.concat_file_name()));

			\tvar js_sources = gulp.src(config.js.tasks.scripts, {read: true})
								\t\t\t\t\t\t.pipe(concat(inject_prepend_js_url+config.js.concat_file_name()));

			\treturn target.pipe(inject(css_sources,config.inject.injectOptionsCss))
				\t\t.pipe(inject(js_sources,config.inject.injectOptionsJs))
				\t\t.pipe(gulp.dest(config.prod.main_folder));
		});

		gulp.task('nodemon', ['index'], function (cb) {
			\tvar started = false;
			\tvar port = argv.port || 3000;
			\tvar prod = argv.prod  ? argv.prod :'';

			\treturn nodemon({
				\t\tscript: config.SERVER,
				\t\text: 'js html css',
				\t\targs: ["--port="+ port ,"--prod="+ prod], 
			\t}).on('start', function () {
				\t\tif (!started) {
					\t\t\tcb();
					\t\t\tstarted = true;
					\t\t\tgulp.src(config.SERVER)
						\t\t\t\t.pipe(notify('App Started...'));
				\t\t}
			\t}).on('restart', function(){
				\t\t// when the app has restarted
			\t});
		});

		gulp.task('default', ['nodemon']);
		EOF
	printf "$tasks"
}

# Adding Partials to Project
# --------------------
# Adding content to partials, pointing to the 
# appropriate controllers.
# --------------------
addPartials() {
	if [ $initTemp -eq 1 ]; then

		log -m "Adding content to partials ..."

		read -r -d '' partialHeader <<- "EOF"
			<header ng-controller="headerController">
				\t<div class="header-cont">
					\t\t<nav class="content home">
						\t\t\t<ul>
							\t\t\t\t<li><a ui-sref="home"><i class="fa fa-home" aria-hidden="true"></i></a></li>
						\t\t\t</ul>
					\t\t</nav>

					\t\t<nav class="content links">
						\t\t\t<ul>
							\t\t\t\t<li><a ui-sref="about">About</a></li>
							\t\t\t\t<li><a ui-sref="contact">Contact</a></li>
						\t\t\t</ul>
					\t\t</nav>
				\t</div>
			</header>
			EOF
		printf "$partialHeader" >$root/web/partials/header/header.html

		read -r -d '' partialMain <<- "EOF"
			<main ng-controller="mainController">
				\t<div class="main-cont">
					\t\t<div ui-view></div>
				\t</div>
			</main>
			EOF
		printf "$partialMain" >$root/web/partials/main-content/main.html

		read -r -d '' partialFooter <<- "EOF"
			<footer ng-controller="footerController">
				\t<div class="footer-cont">
					\t\t<ul>
						\t\t\t<li>[Project Name]</li>
						\t\t\t<li>&copy; 2016 [Author]. All rights reserverd.</li>
					\t\t</ul>
				\t</div>
			</footer>
			EOF
		printf "$partialFooter" >$root/web/partials/footer/footer.html

		read -r -d '' partialMainHome <<- "EOF"
			<section ng-controller="homeController">
				\t[HOME PARTIAL]
			</section>
			EOF
		printf "$partialMainHome" >$root/web/partials/main-content/home.html

		read -r -d '' partialMainAbout <<- "EOF"
			<section ng-controller="aboutController">
				\t[ABOUT PARTIAL]
			</section>
			EOF
		printf "$partialMainAbout" >$root/web/partials/main-content/about.html

		read -r -d '' partialMainContact <<- "EOF"
			<section ng-controller="contactController">
				\t[CONTACT PARTIAL]
			</section>
			EOF
		printf "$partialMainContact" >$root/web/partials/main-content/contact.html

		log -m "Partials complete"
	fi
}

# Adding Directives to Project
# --------------------
# Adding JS for directives to make the app 
# more modular.
# --------------------
addJSDirectives() {
	if [ $initTemp -eq 1 ]; then

		log -m "Adding content to directives ... "

		read -r -d '' directiveHeader <<- "EOF"
			angular.module('app')
			.directive('appHeader', function() {
				\treturn {
					\t\ttemplateUrl: 'partials/header/header.html'
				\t}
			});
			EOF
		printf "$directiveHeader" > $root/web/js/directives/header.js

		read -r -d '' directiveMain <<- "EOF"
			angular.module('app')
			.directive('appMain', function() {
				\treturn {
					\t\ttemplateUrl: 'partials/main-content/main.html'
				\t}
			});
			EOF
		printf "$directiveMain" > $root/web/js/directives/main.js

		read -r -d '' directiveFooter <<- "EOF"
			angular.module('app')
			.directive('appFooter', function() {
				\treturn {
					\t\ttemplateUrl: 'partials/footer/footer.html'
				\t}
			});
			EOF
		printf "$directiveFooter" > $root/web/js/directives/footer.js

		read -r -d '' directiveMainHome <<- "EOF"
			angular.module('app')
			.directive('appMainHome', function() {
				\treturn {
					\t\ttemplateUrl: 'partials/main-content/home.html'
				\t}
			});
			EOF
		printf "$directiveMainHome" > $root/web/js/directives/home.js

		read -r -d '' directiveMainAbout <<- "EOF"
			angular.module('app')
			.directive('appMainAbout', function() {
				\treturn {
					\t\ttemplateUrl: 'partials/main-content/about.html'
				\t}
			});
			EOF
		printf "$directiveMainAbout" > $root/web/js/directives/about.js

		read -r -d '' directiveMainContact <<- "EOF"
			angular.module('app')
			.directive('appMainContact', function() {
				\treturn {
					\t\ttemplateUrl: 'partials/main-content/contact.html'
				\t}
			});
			EOF
		printf "$directiveMainContact" > $root/web/js/directives/contact.js

		log -m "Directives complete"
	fi
}

# Adding Controllers to Project
# --------------------
# Adding JS for controllers to make the app 
# funcitonal.
# --------------------
addJSControllers() {
	if [ $initTemp -eq 1 ]; then

		log -m "Adding content to controllers ... "

		read -r -d '' controllerHeader <<- "EOF"
			angular.module('app')
			.controller('headerController', function($scope) {
				\tconsole.log("Hello from headerController");
			});
			EOF
		printf "$controllerHeader" > $root/web/js/controllers/header/headerController.js

		read -r -d '' controllerMain <<- "EOF"
			angular.module('app')
			.controller('mainController', function($scope) {
				\tconsole.log("Hello from mainController");
			});
			EOF
		printf "$controllerMain" > $root/web/js/controllers/main-content/mainController.js

		read -r -d '' controllerFooter <<- "EOF"
			angular.module('app')
			.controller('footerController', function($scope) {
				\tconsole.log("Hello from footerController");
			});
			EOF
		printf "$controllerFooter" > $root/web/js/controllers/footer/footerController.js

		read -r -d '' controllerMainHome <<- "EOF"
			angular.module('app')
			.controller('homeController', function($scope) {
				\tconsole.log("Hello from homeController");
			});
			EOF
		printf "$controllerMainHome" > $root/web/js/controllers/main-content/homeController.js

		read -r -d '' controllerMainAbout <<- "EOF"
			angular.module('app')
			.controller('aboutController', function($scope) {
				\tconsole.log("Hello from aboutController");
			});
			EOF
		printf "$controllerMainAbout" > $root/web/js/controllers/main-content/aboutController.js

		read -r -d '' controllerMainContact <<- "EOF"
			angular.module('app')
			.controller('contactController', function($scope) {
				\tconsole.log("Hello from contactController");
			});
			EOF
		printf "$controllerMainContact" > $root/web/js/controllers/main-content/contactController.js

		log -m "Controllers complete"

	fi
}

# Adding CSS to Project
# --------------------
# Adding CSS to template HTML
# --------------------
addCSS() {
	if [ $initTemp -eq 1 ] && [ $css -eq 1 ]; then

		log -m "Adding content to CSS files ... "

		read -r -d '' cssPageOverall <<- "EOF"
			body {
				\tmargin: 0;
				\tbackground: #FFF;
				\tfont-family: HelveticaNeue-Light;
			}

			li:focus,
			p:focus,
			div:focus,
			img:focus,
			span:focus{
			  \toutline:none !important;
			  \tborder: 0;
			}
			EOF
		printf "$cssPageOverall" > $root/web/css/page-overall/style.css

		read -r -d '' cssHeader <<- "EOF"
			.header-cont {
				\tdisplay: flex;
				\tflex-wrap: wrap;
				\tjustify-content: space-between;
				\tbackground: #343434;
				\theight: 5vh;
			}

			.header-cont .content ul{
				\tdisplay: flex;
				\tflex-wrap: wrap;
				\tjustify-content: space-between;

				\tlist-style-type: none;
				\tpadding: 0;
			  	\tmargin: 0;
			}

			.header-cont .content ul li {
				\tdisplay: flex;
				\tjustify-content: center;
				\tflex: 1 1 auto;
			}

			.header-cont .content ul li a {
				\tcursor: pointer;
			}

			.header-cont .home {
				\twidth: 5%%;
			}

			.header-cont .home ul {
				\theight: 100%%;
				\tdisplay: flex;
				\talign-items: center;
			}

			.header-cont .home ul li a {
				\tdisplay: flex;
				\tjustify-content: center;
				\tcolor: #F0F5F5;
				\tfont-size: 150%%;
				\ttext-decoration: none;
				\ttransition: all 300ms ease-out;
			}

			.header-cont .home ul li a:hover {
				\tcolor: #69BA49;
			}

			.header-cont .links {
				\twidth: 40%%;
			}

			.header-cont .links ul {
				\theight: 100%%;
				\tdisplay: flex;
				\talign-items: center;
			}

			.header-cont .links ul li a {
				\tcolor: #F0F5F5;
				\tline-height: normal;
				\ttext-decoration: none;
				\ttext-transform: uppercase;
				\tfont-size: .8em;
				\ttransition: all 300ms ease-out;
			}

			.header-cont .links ul li a:hover {
				\tcolor: #69BA49;
			}
			EOF
		printf "$cssHeader" > $root/web/css/header/style.css

		read -r -d '' cssMain <<- "EOF"
			.main-cont {
				\theight: 85vh;
			}
			EOF
		printf "$cssMain" > $root/web/css/main-content/style.css

		read -r -d '' cssFooter <<- "EOF"
			.footer-cont {
				\tbackground: #343434;
				\tdisplay: flex;
				\theight: 10vh;
			}

			.footer-cont ul {
				\tdisplay: flex;
				\tflex: 1 1 100%%;
				\tflex-direction: column;
				\tlist-style: none;
			}

			.footer-cont ul li {
				\tdisplay: flex;
				\tjustify-content: center;
				\talign-items: center;
				\tcolor: #F0F5F5;
				\theight: 50%%;
			}

			.footer-cont ul li:first-child {
				\ttext-transform: uppercase;
				\tfont-size: 1em;
			}

			.footer-cont ul li:last-child {
				\tfont-size: 0.8em;
			}
			EOF
		printf "$cssFooter" > $root/web/css/footer/style.css

		log -m "CSS complete"
	fi
}

# Making Files
# --------------------
# Adding different files to the project and concatenating 
# content to them.
# --------------------
addFiles() {
	log -m "Making files"
	touch $root/.gitignore
	touch $root/README.md
	
	touch $root/web/index.html

	touch $root/web/server.js
	
	touch $root/web/css/styles-main.css

	touch $root/web/css/header/style.css
	touch $root/web/css/main-content/style.css
	touch $root/web/css/main-content/about/style.css
	touch $root/web/css/main-content/contact/style.css
	touch $root/web/css/main-content/home/style.css
	touch $root/web/css/footer/style.css
	touch $root/web/css/page-overall/style.css
	
	touch $root/web/js/app.js

	touch $root/web/js/controllers/header/headerController.js
	touch $root/web/js/controllers/main-content/mainController.js
	touch $root/web/js/controllers/main-content/aboutController.js
	touch $root/web/js/controllers/main-content/contactController.js
	touch $root/web/js/controllers/main-content/homeController.js
	touch $root/web/js/controllers/footer/footerController.js

	touch $root/web/js/directives/about.js
	touch $root/web/js/directives/contact.js
	touch $root/web/js/directives/header.js
	touch $root/web/js/directives/footer.js
	touch $root/web/js/directives/main.js
	touch $root/web/js/directives/home.js

	touch $root/web/partials/header/header.html
	touch $root/web/partials/footer/footer.html
	touch $root/web/partials/main-content/about.html
	touch $root/web/partials/main-content/main.html
	touch $root/web/partials/main-content/contact.html
	touch $root/web/partials/main-content/home.html

	log -m "Generating content ... "

	addGitIgnore > $root/.gitignore
	addIndexHTML > $root/web/index.html
	addStylesMainCSS > $root/web/css/styles-main.css
	addAppJS > $root/web/js/app.js
	addServerJS > $root/web/server.js

	addJSDirectives
	addJSControllers
	addPartials
	addCSS
}

# Adding Gulp Task Runner to Project
# --------------------
# Adding gulpfile.js, congig.js package.json, 
# and installing dependencies. In addition, gulpfile.js 
# is populated with variables referencing the packages 
# that are installed as dev dependencies.
# --------------------
gulpSetup() {
	log -m "Setting up Gulp Task Runner for project"
	
	cd $root/web
		mkdir gulp_config
	cd ..

	touch $root/web/gulpfile.js
	touch $root/web/gulp_config/config.js

	log -m "Adding taks to Gulp File ... "
	addGulpFile > $root/web/gulpfile.js
	addGulpTasks >> $root/web/gulpfile.js
	addGulpConfigFile > $root/web/gulp_config/config.js

	cd $root/web
	npm init
	installNpmDependencies
	cd ..
	log -m "Gulp added"
}

# ========================================
#	SETUP
# ========================================
findBrew

checkBrewDependencies
installBrewDependencies

checkReqArgs
promptAdditionalPackageInstall
promptToMakeTemplate

main() {
	makeDirectories
	addFiles
	gulpSetup

	log -m 'Project setup complete!'
}

# ========================================
#	RUN MAIN
# ========================================

main
